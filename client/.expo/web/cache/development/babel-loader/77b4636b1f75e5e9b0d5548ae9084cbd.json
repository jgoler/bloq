{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\nexport var register = function register(_ref) {\n  var name = _ref.name,\n      email = _ref.email,\n      password = _ref.password;\n  return function _callee(dispatch) {\n    var config, body, res, errors;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            body = JSON.stringify({\n              name: name,\n              email: email,\n              password: password\n            });\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.post('http://localhost:5000/api/users', body, config));\n\n          case 5:\n            res = _context.sent;\n            dispatch({\n              type: REGISTER_SUCCESS,\n              payload: res.data\n            });\n            _context.next = 15;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            console.log('this is the error you are looking for', _context.t0);\n            errors = _context.t0.response.data.errors;\n\n            if (errors) {\n              errors.forEach(function (error) {\n                return dispatch(setAlert(error.msg, 'danger'));\n              });\n            }\n\n            dispatch({\n              type: REGISTER_FAIL\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 9]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/jackgoler/bloq/client/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","register","name","email","password","dispatch","config","headers","body","JSON","stringify","post","res","type","payload","data","console","log","errors","response","forEach","error","msg"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT;AACA,SACEC,gBADF,EAEEC,aAFF;AAMA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAASC,KAAT,QAASA,KAAT;AAAA,MAAgBC,QAAhB,QAAgBA,QAAhB;AAAA,SAA+B,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/CC,YAAAA,MAD+C,GACtC;AACbC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AADI,aADsC;AAO/CC,YAAAA,IAP+C,GAOxCC,IAAI,CAACC,SAAL,CAAe;AAAER,cAAAA,IAAI,EAAJA,IAAF;AAAQC,cAAAA,KAAK,EAALA,KAAR;AAAeC,cAAAA,QAAQ,EAARA;AAAf,aAAf,CAPwC;AAAA;AAAA;AAAA,6CAUjCP,KAAK,CAACc,IAAN,CAAW,iCAAX,EAA8CH,IAA9C,EAAoDF,MAApD,CAViC;;AAAA;AAU7CM,YAAAA,GAV6C;AAYnDP,YAAAA,QAAQ,CAAC;AACPQ,cAAAA,IAAI,EAAEd,gBADC;AAEPe,cAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,aAAD,CAAR;AAZmD;AAAA;;AAAA;AAAA;AAAA;AAkBnDC,YAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACMC,YAAAA,MAnB6C,GAmBpC,YAAIC,QAAJ,CAAaJ,IAAb,CAAkBG,MAnBkB;;AAqBnD,gBAAIA,MAAJ,EAAY;AACVA,cAAAA,MAAM,CAACE,OAAP,CAAe,UAAAC,KAAK;AAAA,uBAAIhB,QAAQ,CAACP,QAAQ,CAACuB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAZ;AAAA,eAApB;AACD;;AAEDjB,YAAAA,QAAQ,CAAC;AACPQ,cAAAA,IAAI,EAAEb;AADC,aAAD,CAAR;;AAzBmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;AAAA,CAAjB","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from './types';\n\n// Register User\nexport const register = ({ name, email, password }) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('http://localhost:5000/api/users', body, config);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    //dispatch(NavigationActions.navigate({ routeName: 'CreateProfile' }));\n  } catch (err) {\n    console.log('this is the error you are looking for', err);\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}